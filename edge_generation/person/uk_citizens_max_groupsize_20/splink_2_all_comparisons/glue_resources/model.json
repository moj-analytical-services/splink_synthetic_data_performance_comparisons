{
  "link_type": "dedupe_only",
  "unique_id_column_name": "unique_id",
  "blocking_rules": [
    "l.outward_postcode_std = r.outward_postcode_std and l.dob = r.dob",
    "l.postcode = r.postcode and l.dob_year = r.dob_year",
    "l.postcode = r.postcode and l.dob_month = r.dob_month",
    "l.postcode = r.postcode and l.dob_day = r.dob_day",
    "l.forename1_dm = r.forename1_dm and l.occupation = r.occupation and l.dob_year = r.dob_year",
    "l.forename1_dm = r.forename1_dm and l.surname_dm = r.surname_dm and l.dob_year = r.dob_year",
    "l.cluster = r.cluster"
  ],
  "comparison_columns": [
    {
      "col_name": "surname_std",
      "case_expression": "case\n    when surname_std_l is null or surname_std_r is null then -1\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.7 then 1\n    else 0 end  as gamma_surname_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9813148777960953, 0.017308097705680512, 0.0009035630732969886,
        0.00047346142492724633
      ],
      "fix_u_probabilities": true,
      "gamma_index": 0,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.07231759735509184, 0.03208750420933141, 0.16047212628290083,
        0.7351227721526759
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "col_name": "forename1_std",
      "case_expression": "case\n    when forename1_std_l is null or forename1_std_r is null then -1\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.7 then 1\n    else 0 end  as gamma_forename1_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9682993689240439, 0.024371626692607406, 0.0026658554559331232,
        0.004663148927415616
      ],
      "fix_u_probabilities": true,
      "gamma_index": 1,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.13405910421001985, 0.14262489683392832, 0.1591784709464966,
        0.5641375280095553
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "col_name": "forename2_std",
      "u_probabilities": [0.9931054336530342, 0.006894566346965727],
      "fix_u_probabilities": true,
      "gamma_index": 2,
      "num_levels": 2,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "case_expression": "case\n    when forename2_std_l is null or forename2_std_r is null then -1\n    when forename2_std_l = forename2_std_r then 1\n    else 0 end  as gamma_forename2_std",
      "m_probabilities": [0.4238335234714466, 0.5751058061687033],
      "tf_adjustment_weights": [0.0, 1.0]
    },
    {
      "col_name": "occupation",
      "num_levels": 2,
      "term_frequency_adjustments": true,
      "u_probabilities": [0.9625616271537041, 0.037438372846295996],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "fix_m_probabilities": false,
      "case_expression": "case\n    when occupation_l is null or occupation_r is null then -1\n    when occupation_l = occupation_r then 1\n    else 0 end  as gamma_occupation",
      "m_probabilities": [0.09749314203673556, 0.9021229607979062],
      "tf_adjustment_weights": [0.0, 1.0]
    },
    {
      "col_name": "dob",
      "case_expression": "case\n    when dob_l is null or dob_r is null then -1\n    when dob_l = dob_r  and substr(dob_l, -5) = '01-01'  then 2\n    when dob_l = dob_r  then 3\n    when levenshtein(dob_l, dob_r) <= 1 then 1\n    else 0 end  as gamma_dob",
      "num_levels": 4,
      "u_probabilities": [
        0.9952479225276455, 0.004442638147909406, 0.000289932802437612,
        1.9506522007483916e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 4,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.05444044141566166, 0.37219932940485767, 0.12884973069068933,
        0.4438891952702691
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "custom_name": "custom_postcode_distance_comparison",
      "custom_columns_used": ["postcode", "lat_lng", "birth_place"],
      "case_expression": "case\nwhen (postcode_l is null or postcode_r is null) then -1\nwhen postcode_l = postcode_r then 4\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 5) then 3\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 50)  then 2\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 150)  then 1\nelse 0\nend  as gamma_custom_postcode_distance_comparison",
      "num_levels": 5,
      "u_probabilities": [
        0.6892491780693188, 0.2249825473401849, 0.07805962426450684,
        0.007691540360937685, 1.7109965051740304e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.06090820586039198, 0.02211673491350858, 0.11677784326178103,
        0.1510307449089588, 0.6491664710553597
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 0.0, 1.0]
    }
  ],
  "additional_columns_to_retain": ["cluster", "source_dataset"],
  "em_convergence": 0.001,
  "max_iterations": 100,
  "retain_intermediate_calculation_columns": false,
  "retain_matching_columns": false,
  "source_dataset_column_name": "source_dataset",
  "proportion_of_matches": 2.2758755780656834e-6
}
